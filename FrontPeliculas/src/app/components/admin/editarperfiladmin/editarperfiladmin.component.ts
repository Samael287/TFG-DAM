import { Component } from '@angular/core';
import { UsuariosService } from '../../../services/usuarios.service';
import { AuthService } from '../../../services/auth.service';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-editarperfiladmin',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule],
  templateUrl: './editarperfiladmin.component.html',
  styleUrl: './editarperfiladmin.component.css'
})
export class EditarPerfilAdminComponent {
 usuario: any = {};         // Datos del usuario
  nuevaPassword: string = ''; // Nueva contrase√±a
  confirmarPassword: string = ''; // Confirmaci√≥n de nueva contrase√±a
  tarjeta: any = {};         // Datos de la tarjeta (vac√≠o si no hay)
  mostrarFormularioTarjeta: boolean = false; // Para mostrar el formulario de tarjeta (cuando el usuario no tiene tarjeta asociada)
  verificado: boolean = false; // Indica si la contrase√±a ha sido verificada
  passwordActual: string = ''; // Contrase√±a actual para verificar

  constructor(
    private usuariosService: UsuariosService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    console.log('üîÑ Cargando datos del usuario...');
    this.cargarDatosUsuario();
  }

  cargarDatosUsuario(): void {
    const userId = localStorage.getItem('userId');
    console.log("üìå ID del usuario autenticado:", userId);

    if (!userId) {
      alert('Error: No se pudo obtener el usuario.');
      return;
    }

    this.usuariosService.getUsuarios().subscribe(
      (usuarios) => {
        console.log("üì• Usuarios obtenidos de la API:", usuarios);
        // Buscar el usuario con el ID correspondiente
        this.usuario = usuarios.find((u: any) => u.id == userId);
      },
      (error) => {
        console.error('‚ùå Error al obtener usuario:', error);
      }
    );
  }

  // M√©todo para verificar la contrase√±a actual
  verificarPassword(): void {
    const userId = localStorage.getItem('userId');
    console.log("üìå Verificando contrase√±a para el usuario ID:", userId);
    console.log("üîç Contrase√±a ingresada:", this.passwordActual);

    if (!userId) {
      alert("Error: No se encontr√≥ el ID del usuario.");
      return;
    }

    this.usuariosService.verifyPassword(parseInt(userId), this.passwordActual).subscribe(
      (response) => {
        console.log("‚úÖ Contrase√±a verificada:", response);
        this.verificado = true;
        alert("Contrase√±a verificada correctamente.");
      },
      (error) => {
        console.error("‚ùå Error al verificar contrase√±a:", error);
        alert("La contrase√±a es incorrecta.");
      }
    );
  }

  // M√©todo para formatear la fecha al formato "YYYY-MM-DD"
  formatDate(date: string): string {
    if (!date) return ''; 
    const d = new Date(date);
    return d.toISOString().split('T')[0];
  }

  actualizarPerfil(): void {
    if (!this.verificado) {
      alert('Debes verificar tu contrase√±a antes de actualizar los datos.');
      return;
    }
  
    if (this.nuevaPassword && this.nuevaPassword !== this.confirmarPassword) {
      alert('Las contrase√±as no coinciden.');
      return;
    }
  
    // Crear objeto solo con los campos a actualizar
    let usuarioActualizado: any = {
      id: this.usuario.id,
      nombre: this.usuario.nombre,
      apellidos: this.usuario.apellidos,
      email: this.usuario.email,
      rol: this.usuario.rol.toString(),
      // Si se ingresa una nueva contrase√±a se usa, sino se mantiene la actual
      password: this.nuevaPassword.trim() !== '' ? this.nuevaPassword : this.usuario.password,
      tarjeta: null // <-- A√±adilo
    };
  
    console.log('üì§ Enviando datos actualizados a la API:', usuarioActualizado);
  
    this.usuariosService.updateUsuario(this.usuario.id, usuarioActualizado).subscribe(
      (response) => {
        console.log('‚úÖ Perfil actualizado con √©xito:', response);

        //Actualizar el usuario al instante
        this.authService.setUser(response.usuario);
        alert('Perfil actualizado con √©xito.');
      },
      (error) => {
        console.error('‚ùå Error en la actualizaci√≥n:', error);
        alert('Error al actualizar el perfil.');
      }
    );
    this.router.navigate(['/admin/gestiontotal']);
  }
}
